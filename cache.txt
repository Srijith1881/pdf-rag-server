from langchain_community.document_loaders import PyMuPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain import hub
from dotenv import load_dotenv
import os
'''
load_dotenv()
# pdf_path =r"C:\Users\LEGION\OneDrive\Desktop\documents\ML_Mastery_Roadmap.pdf"
# pdf_path =r"C:\Users\LEGION\OneDrive\Desktop\Toyota_Corolla_Altis_Speech.pdf"
pdf_path =r"C:\Users\LEGION\OneDrive\Desktop\Apple_fruit_company.pdf"
loader = PyMuPDFLoader(pdf_path)
docs = loader.load()

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(docs)

embedding = HuggingFaceEmbeddings(model_name="BAAI/bge-small-en-v1.5")
vectorstore = Chroma.from_documents(documents=splits, embedding=embedding)
retriever = vectorstore.as_retriever()


prompt = hub.pull("rlm/rag-prompt")

def format_docs(docs):
    return "\n".join(doc.page_content for doc in docs)

os.environ["GOOGLE_API_KEY"] = os.getenv("API")
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest")


rag_chain = (
    {"context": retriever | format_docs, "question": RunnablePassthrough()}
    | prompt
    | llm
    | StrOutputParser()
)

# question = "what are the tree based models"
# question = "what engines does corolla use"
question = 'who found apple'
response = rag_chain.invoke(question)
print(response)
'''